#!/bin/bash

# Set first operator 
OP=$(echo "$1")
OP2=$(echo "$2")

# Set variables for easy normal/bold font switching
bold=$(tput bold)
normal=$(tput sgr0)

if [[ -z $OP || $OP == "--help" || $OP == "-h" ]];
then
	printf "rm-kernel(8)
	\n\n${bold}Description${normal}
	\n\tManage installed Linux kernels, initramfs and GRUB bootloader entries.
	\n\tThe script might request root privilages when certain operators are used.
	\n\tThis program assumes common file naming schemes are used.
	\n\n${bold}Commonly used options${normal}
	\n\n\t${bold}-h, --help${normal}
	\n\t\tShow this help page
	\n\t${bold}-l, --list${normal}
	\n\t\tList installed kernels\n
	\n\n${bold}Listing information${normal}
	\n\t${bold}-la, --list-all${normal}
	\n\t\tList all
	\n\t${bold}-lb, --list-bootloader-entries${normal}
	\n\t\tList grub bootloader entries
	\n\t${bold}-lh, --list-headers${normal}
	\n\t\tList installed kernel headers per kernel version
	\n\t${bold}-lm, --list-modules${normal}
	\n\t\tList installed modules
	\n\n${bold}Removing${normal}
	\n\t${bold}-rm, --remove <kernel>${normal}
	\n\t\tRemove installed kernel, initramfs, bootloader entries and modules 
	\n"

	# Exit
	exit  0
fi

### Listing information ###
if [[ $OP == "--list" || $OP == "-l" ]];
then
	# Check for compressed kernels
	ls -1 /boot | grep vmlinuz-*

	# Check for uncompressed kernels
	ls -1 /boot | grep vmlinux-*

	# Exit
	exit  0
fi

if [[ $OP == "--list-all" || $OP == "-la" ]];
then
	# Request root privilages if not already root
	if [ $EUID != 0 ]; 
	then
  	sudo "$0" "$@"
   	exit $?
	fi

	printf "${bold}Kernels${normal}\n"
	ls -1 /boot | grep vmlinuz-*
	ls -1 /boot | grep vmlinux-*

	printf "\n${bold}Initramfs${normal}\n"
	ls -1 /boot | grep initramfs*

	printf "\n${bold}Modules${normal}\n"
	ls -1 /lib/modules

	printf "\n${bold}Bootloader entries${normal}\n"
	# Grep everything except rescue entries
	ls -1 /boot/loader/entries | grep -v "rescue"

	# Exit
	exit  0
fi

if [[ $OP == "--list-bootloader-entries" || $OP == "-lb" ]];
then
	# Request root privilages if not already root
	if [ $EUID != 0 ]; 
	then
  	sudo "$0" "$@"
   	exit $?
	fi
	# List GRUB bootloader entries
	ls -1 /boot/loader/entries
	
	# Exit
	exit  0
fi

if [[ $OP == "--list-headers" || $OP == "-lh" ]];
then
	# List kernel modules
	ls -1 /lib/modules
	
	# Exit
	exit  0
fi


if [[ $OP == "--list-modules" || $OP == "-lm" ]];
then
	# List kernel headers
	ls -1 /lib/modules
	
	# Exit
	exit  0
fi

### Removing ###
if [[ $OP == "--remove" || $OP == "-rm" ]];
then
	if [ -z $OP2 ]; 
	then
		printf "You must specify a kernel to remove
		\n${bold}-rm, --remove <kernel>${normal}
		\n\tRemove installed kernel, initramfs, bootloader entries and modules
		\n"
   	exit $?
	fi
	# Request root privilages if not already root
	if [ $EUID != 0 ]; 
	then
  	sudo "$0" "$@"
   	exit $?
	fi

	# Remove kernel
	printf "Removing kernel...\n"
	rm /boot/mvlinuz-*$OP2* 2> /dev/null || printf "Error removing kernel $OP2, it likely does not exist or you do not have the rights to remove it\n"

	# Remove initramfs
	printf "Removing initrams...\n"
	rm /boot/initramfs-*$OP2* 2> /dev/null || printf "Error removing initramfs for kernel $OP2, it likely does not exist or you do not have the rights to remove it\n"
	
	# Remove kernel configs
	printf "Removing configs...\n"
	rm /boot/config-*$OP2* 2> /dev/null || printf "Could not find any kernel config files, -Don't panic- not all distros have these\n"

	# Remove modules
	printf "Removing modules...\n"
	rm -r /lib/modules/*$OP2* 2> /dev/null || printf "Error removing modules for kernel $OP2, it likely does not exist or you do not have the rights to remove it\n"

	# Remove bootloader entries
	printf "Removing bootloader entries...\n"
	rm -r /boot/loader/entries/*$OP2* 2> /dev/null || printf "Error removing GRUB bootloader entries for kernel $OP2, it likely does not exist or you do not have the rights to remove it\n"

	printf "Done...\n"
 

	# Exit
	exit  0
fi

